---
// CodeDemo component for interactive code examples with syntax highlighting
export interface Props {
  title?: string;
  language?: string;
  filename?: string;
  class?: string;
  showLineNumbers?: boolean;
}

const { 
  title, 
  language = 'javascript', 
  filename, 
  class: className = '',
  showLineNumbers = false 
} = Astro.props;

// Generate a unique ID for this code block
const codeId = `code-${Math.random().toString(36).substr(2, 9)}`;
---

<div class={`my-6 rounded-lg overflow-hidden shadow-lg border border-gray-200 ${className}`}>
  <!-- Header -->
  <div class="bg-gray-900 px-4 py-3 flex items-center justify-between">
    <div class="flex items-center gap-3">
      <!-- Traffic light dots -->
      <div class="flex gap-1.5">
        <div class="w-3 h-3 rounded-full bg-red-500"></div>
        <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
        <div class="w-3 h-3 rounded-full bg-green-500"></div>
      </div>
      
      <!-- Title/Filename -->
      <div class="text-gray-300 text-sm font-medium">
        {filename && (
          <span class="text-blue-400">{filename}</span>
        )}
        {title && !filename && (
          <span>{title}</span>
        )}
        {!title && !filename && (
          <span>{language}</span>
        )}
      </div>
    </div>
    
    <!-- Copy button -->
    <button 
      type="button"
      class="copy-btn text-gray-400 hover:text-white text-sm px-3 py-1 rounded bg-gray-800 hover:bg-gray-700 transition-colors"
      data-code-id={codeId}
    >
      Copy
    </button>
  </div>
  
  <!-- Code content -->
  <div class="bg-gray-800 p-4 overflow-x-auto">
    <pre class={showLineNumbers ? 'line-numbers' : ''}><code id={codeId} class={`language-${language} text-sm`}><slot /></code></pre>
  </div>
</div>

<script>
  // Add copy functionality
  document.addEventListener('DOMContentLoaded', function() {
    const copyButtons = document.querySelectorAll('.copy-btn');
    
    copyButtons.forEach(button => {
      button.addEventListener('click', async function() {
        const codeId = this.getAttribute('data-code-id');
        const codeElement = document.getElementById(codeId);
        
        if (codeElement) {
          try {
            await navigator.clipboard.writeText(codeElement.textContent);
            
            // Visual feedback
            const originalText = this.textContent;
            this.textContent = 'Copied!';
            this.classList.add('bg-green-600');
            
            setTimeout(() => {
              this.textContent = originalText;
              this.classList.remove('bg-green-600');
            }, 2000);
          } catch (err) {
            console.error('Failed to copy text: ', err);
          }
        }
      });
    });
  });
</script>

<style>
  /* Line numbers styling */
  .line-numbers {
    counter-reset: line;
  }
  
  .line-numbers code {
    counter-increment: line;
  }
  
  .line-numbers code::before {
    content: counter(line);
    display: inline-block;
    width: 2em;
    margin-right: 1em;
    text-align: right;
    color: #6b7280;
    border-right: 1px solid #374151;
    padding-right: 0.5em;
  }
</style> 